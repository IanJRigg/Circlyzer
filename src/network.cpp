#include "circuit_analyzer/network.h"

/**********************************************************************************************//**
 * \brief 
 *************************************************************************************************/
Network::Network() :
    entity_table(),
    alias_to_id_table(),
    id_incrementer{ 0U }
{

}

/**********************************************************************************************//**
 * \brief 
 *************************************************************************************************/
uint32_t Network::create_node()
{
    return 0U;
}

/**********************************************************************************************//**
 * \brief 
 *************************************************************************************************/
uint32_t Network::create_element()
{
    return 0U;
}

/**********************************************************************************************//**
 * \brief 
 * \param uid 
 *************************************************************************************************/
const Node& Network::get_node(const uint32_t uid) const
{

}

/**********************************************************************************************//**
 * \brief 
 * \param uid 
 *************************************************************************************************/
const Element& Network::get_element(const uint32_t uid) const
{

}

/**********************************************************************************************//**
 * \brief 
 * \param alias 
 *************************************************************************************************/
const Node& Network::get_node(const std::string& alias) const
{

}

/**********************************************************************************************//**
 * \brief 
 * \param alias 
 *************************************************************************************************/
const Element& Network::get_element(const std::string& alias) const
{

}

/**********************************************************************************************//**
 * \brief 
 * \param first_entity
 * \param second_entity 
 *************************************************************************************************/
void Network::create_connection_between(const uint32_t first_entity, const uint32_t second_entity)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param first_entity
 * \param second_entity 
 *************************************************************************************************/
void Network::delete_connection_between(const uint32_t first_entity, const uint32_t second_entity)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param first_entity
 * \param second_entity 
 *************************************************************************************************/
void Network::create_connection_between(const std::string& first_entity,
                                        const std::string& second_entity)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param first_entity
 * \param second_entity 
 *************************************************************************************************/
void Network::delete_connection_between(const std::string& first_entity,
	                                    const std::string& second_entity)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param uid 
 *************************************************************************************************/
void Network::destroy_node(const uint32_t uid)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param uid 
 *************************************************************************************************/
void Network::destroy_element(const uint32_t uid)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param alias 
 *************************************************************************************************/
void Network::destroy_node(const std::string& alias)
{

}

/**********************************************************************************************//**
 * \brief 
 * \param alias 
 *************************************************************************************************/
void Network::destroy_element(const std::string alias)
{

}
